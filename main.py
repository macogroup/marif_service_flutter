# main.py
from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from sqlalchemy.orm import Session
from typing import List
import json

from models import Character, User, get_db, CharacterCreate, CharacterResponse, CharacterUpdate

app = FastAPI(title="Anime Characters Admin", version="1.0.0")

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
# app.mount("/static", StaticFiles(directory="static"), name="static")

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏
@app.get("/", response_class=HTMLResponse)
def admin_dashboard():
    return """
    <html>
        <head>
            <title>Anime Characters Admin</title>
            <style>
                body { font-family: Arial; margin: 40px; }
                .container { max-width: 1200px; margin: 0 auto; }
                .btn { padding: 10px 20px; margin: 5px; background: #007bff; color: white; text-decoration: none; border-radius: 5px; }
                .btn:hover { background: #0056b3; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üéå Anime Characters Admin Panel</h1>
                <p>API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ –∞–Ω–∏–º–µ</p>
                
                <h3>üìã –û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:</h3>
                <ul>
                    <li><a href="/docs" class="btn">üìñ API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (Swagger)</a></li>
                    <li><a href="/characters" class="btn">üë• –í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏</a></li>
                    <li><a href="/redoc" class="btn">üìö ReDoc</a></li>
                </ul>
                
                <h3>üîß –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</h3>
                <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <strong>/docs</strong> –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</p>
            </div>
        </body>
    </html>
    """

# CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
@app.post("/characters/", response_model=CharacterResponse, status_code=status.HTTP_201_CREATED)
def create_character(character: CharacterCreate, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –≤ JSON
    tags_json = json.dumps(character.tag) if character.tag else json.dumps([])
    
    db_character = Character(
        name=character.name,
        age=character.age,
        description=character.description,
        avatar_url=character.avatar_url,
        cost=character.cost,
        likes_count=character.likes_count,
        tag=tags_json,
        recom=character.recom,
        backstory=character.backstory
    )
    
    db.add(db_character)
    db.commit()
    db.refresh(db_character)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–≥–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    if db_character.tag:
        try:
            db_character.tag = json.loads(db_character.tag)
        except (json.JSONDecodeError, TypeError):
            db_character.tag = []
    else:
        db_character.tag = []
    
    return db_character

@app.get("/characters/", response_model=List[CharacterResponse])
def get_all_characters(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    characters = db.query(Character).offset(skip).limit(limit).all()
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º JSON —Ç–µ–≥–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    for char in characters:
        if char.tag:
            try:
                char.tag = json.loads(char.tag) if isinstance(char.tag, str) else char.tag
            except (json.JSONDecodeError, TypeError):
                char.tag = []
        else:
            char.tag = []
    
    return characters

@app.get("/characters/{character_id}", response_model=CharacterResponse)
def get_character(character_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ ID"""
    character = db.query(Character).filter(Character.id == character_id).first()
    
    if not character:
        raise HTTPException(status_code=404, detail="–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º JSON —Ç–µ–≥–∏
    if character.tag:
        try:
            character.tag = json.loads(character.tag) if isinstance(character.tag, str) else character.tag
        except (json.JSONDecodeError, TypeError):
            character.tag = []
    else:
        character.tag = []
    
    return character

@app.put("/characters/{character_id}", response_model=CharacterResponse)
def update_character(character_id: int, character_update: CharacterUpdate, db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    character = db.query(Character).filter(Character.id == character_id).first()
    
    if not character:
        raise HTTPException(status_code=404, detail="–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    update_data = character_update.dict(exclude_unset=True)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏ –≤ JSON –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if 'tag' in update_data:
        update_data['tag'] = json.dumps(update_data['tag'])
    
    for field, value in update_data.items():
        setattr(character, field, value)
    
    db.commit()
    db.refresh(character)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏ –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    if character.tag:
        try:
            character.tag = json.loads(character.tag) if isinstance(character.tag, str) else character.tag
        except (json.JSONDecodeError, TypeError):
            character.tag = []
    else:
        character.tag = []
    
    return character

@app.delete("/characters/{character_id}")
def delete_character(character_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    character = db.query(Character).filter(Character.id == character_id).first()
    
    if not character:
        raise HTTPException(status_code=404, detail="–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    db.delete(character)
    db.commit()
    
    return {"message": f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {character.name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/characters/search/{name}")
def search_characters(name: str, db: Session = Depends(get_db)):
    """–ü–æ–∏—Å–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ –∏–º–µ–Ω–∏"""
    characters = db.query(Character).filter(Character.name.contains(name)).all()
    return characters

@app.post("/characters/{character_id}/like")
def like_character(character_id: int, db: Session = Depends(get_db)):
    """–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤"""
    character = db.query(Character).filter(Character.id == character_id).first()
    
    if not character:
        raise HTTPException(status_code=404, detail="–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    character.likes_count += 1
    db.commit()
    
    return {"message": f"–õ–∞–π–∫ –¥–æ–±–∞–≤–ª–µ–Ω! –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: {character.likes_count}"}

# CRUD –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@app.get("/users/", response_model=List[dict])
def get_all_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users = db.query(User).offset(skip).limit(limit).all()
    return [{"id": u.id, "name": u.name, "login": u.login, "email": u.email, "coins": u.coins, "sex": u.sex} for u in users]

@app.get("/users/{user_id}")
def get_user(user_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return {"id": user.id, "name": user.name, "login": user.login, "email": user.email, "coins": user.coins, "sex": user.sex}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)